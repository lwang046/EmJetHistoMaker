// Generated by histo_definitions.py
// Edit with caution!
#include <string>
#include <unordered_map>

using std::string;
using std::unordered_map;

class EmJetHistos
{
 public:
  EmJetHistos();
  ~EmJetHistos();
  unordered_map<string, TH1F*> hist1d;
  unordered_map<string, TH2F*> hist2d;

  /*[[[cog
    import histo_definitions as mod
    mod.generate_vbin_decl()
    ]]]*/
  const int nBins_track_ipXY = 100; const double bins_track_ipXY[100+1] = { 1e-08, 1.2589254117941661e-08, 1.5848931924611143e-08, 1.9952623149688786e-08, 2.5118864315095821e-08, 3.1622776601683792e-08, 3.981071705534969e-08, 5.011872336272725e-08, 6.3095734448019296e-08, 7.943282347242822e-08, 9.9999999999999995e-08, 1.2589254117941662e-07, 1.5848931924611141e-07, 1.9952623149688787e-07, 2.5118864315095823e-07, 3.1622776601683792e-07, 3.9810717055349692e-07, 5.011872336272725e-07, 6.3095734448019296e-07, 7.943282347242822e-07, 9.9999999999999995e-07, 1.2589254117941661e-06, 1.5848931924611141e-06, 1.9952623149688829e-06, 2.5118864315095823e-06, 3.1622776601683792e-06, 3.9810717055349691e-06, 5.011872336272725e-06, 6.3095734448019432e-06, 7.9432823472428217e-06, 1.0000000000000001e-05, 1.2589254117941661e-05, 1.5848931924611141e-05, 1.995262314968883e-05, 2.5118864315095822e-05, 3.1622776601683795e-05, 3.9810717055349695e-05, 5.0118723362727251e-05, 6.3095734448019429e-05, 7.9432823472428221e-05, 0.0001, 0.00012589254117941688, 0.00015848931924611142, 0.00019952623149688788, 0.00025118864315095823, 0.00031622776601683794, 0.00039810717055349773, 0.00050118723362727253, 0.00063095734448019429, 0.00079432823472428218, 0.001, 0.0012589254117941688, 0.0015848931924611141, 0.0019952623149688828, 0.002511886431509582, 0.0031622776601683794, 0.0039810717055349778, 0.0050118723362727246, 0.0063095734448019424, 0.0079432823472428207, 0.01, 0.012589254117941687, 0.015848931924611141, 0.01995262314968883, 0.025118864315095822, 0.031622776601683791, 0.039810717055349776, 0.050118723362727248, 0.063095734448019428, 0.079432823472428221, 0.10000000000000001, 0.12589254117941687, 0.15848931924611143, 0.19952623149688828, 0.25118864315095824, 0.31622776601683794, 0.39810717055349776, 0.50118723362727247, 0.63095734448019425, 0.79432823472428216, 1.0, 1.2589254117941662, 1.5848931924611174, 1.9952623149688828, 2.5118864315095824, 3.1622776601683795, 3.9810717055349691, 5.0118723362727353, 6.3095734448019432, 7.9432823472428211, 10.0, 12.589254117941662, 15.848931924611174, 19.952623149688829, 25.11886431509582, 31.622776601683793, 39.810717055349855, 50.118723362727351, 63.095734448019428, 79.432823472428211, 100.0 };
  const int nBins_track_ipSig = 100; const double bins_track_ipSig[100+1] = { 0.01, 0.011220184543019636, 0.012589254117941675, 0.01412537544622754, 0.015848931924611134, 0.017782794100389229, 0.019952623149688799, 0.022387211385683399, 0.025118864315095794, 0.028183829312644536, 0.031622776601683791, 0.035481338923357551, 0.039810717055349734, 0.0446683592150963, 0.050118723362727248, 0.056234132519034911, 0.063095734448019331, 0.070794578438413802, 0.079432823472428138, 0.089125093813374592, 0.10000000000000001, 0.11220184543019636, 0.12589254117941676, 0.14125375446227548, 0.15848931924611143, 0.17782794100389229, 0.19952623149688797, 0.223872113856834, 0.25118864315095807, 0.28183829312644548, 0.31622776601683794, 0.35481338923357547, 0.39810717055349731, 0.44668359215096326, 0.50118723362727247, 0.56234132519034907, 0.63095734448019336, 0.70794578438413802, 0.79432823472428171, 0.8912509381337459, 1.0, 1.1220184543019642, 1.2589254117941675, 1.4125375446227539, 1.584893192461114, 1.7782794100389228, 1.9952623149688808, 2.2387211385683399, 2.5118864315095824, 2.818382931264455, 3.1622776601683795, 3.5481338923357568, 3.9810717055349731, 4.4668359215096345, 5.0118723362727247, 5.6234132519034912, 6.309573444801936, 7.0794578438413804, 7.9432823472428211, 8.9125093813374594, 10.0, 11.220184543019641, 12.589254117941675, 14.125375446227554, 15.848931924611142, 17.782794100389228, 19.952623149688808, 22.387211385683401, 25.11886431509582, 28.183829312644551, 31.622776601683793, 35.481338923357569, 39.810717055349734, 44.668359215096345, 50.118723362727252, 56.234132519034908, 63.095734448019364, 70.794578438413808, 79.432823472428211, 89.12509381337459, 100.0, 112.2018454301963, 125.89254117941688, 141.25375446227554, 158.48931924611142, 177.82794100389228, 199.52623149688787, 223.87211385683423, 251.18864315095823, 281.83829312644548, 316.22776601683796, 354.81338923357532, 398.10717055349772, 446.68359215096348, 501.18723362727246, 562.34132519034904, 630.95734448019425, 707.94578438413873, 794.3282347242822, 891.25093813374588, 1000.0 };
  const int nBins_track_distanceToJet = 100; const double bins_track_distanceToJet[100+1] = { 0.001, 0.001122018454301963, 0.0012589254117941675, 0.001412537544622754, 0.0015848931924611141, 0.0017782794100389228, 0.0019952623149688789, 0.0022387211385683399, 0.0025118864315095794, 0.0028183829312644548, 0.0031622776601683794, 0.0035481338923357532, 0.0039810717055349734, 0.0044668359215096305, 0.0050118723362727246, 0.005623413251903491, 0.0063095734448019303, 0.0070794578438413804, 0.0079432823472428138, 0.0089125093813374589, 0.01, 0.011220184543019636, 0.012589254117941675, 0.014125375446227547, 0.015848931924611141, 0.017782794100389229, 0.019952623149688799, 0.022387211385683399, 0.025118864315095808, 0.02818382931264455, 0.031622776601683791, 0.035481338923357551, 0.039810717055349734, 0.044668359215096327, 0.050118723362727248, 0.056234132519034911, 0.063095734448019331, 0.070794578438413802, 0.07943282347242818, 0.089125093813374592, 0.10000000000000001, 0.11220184543019641, 0.12589254117941676, 0.14125375446227539, 0.15848931924611143, 0.17782794100389229, 0.19952623149688808, 0.223872113856834, 0.25118864315095824, 0.28183829312644548, 0.31622776601683794, 0.35481338923357569, 0.39810717055349731, 0.44668359215096348, 0.50118723362727247, 0.56234132519034907, 0.63095734448019358, 0.70794578438413802, 0.79432823472428216, 0.8912509381337459, 1.0, 1.1220184543019642, 1.2589254117941675, 1.4125375446227555, 1.584893192461114, 1.7782794100389228, 1.9952623149688808, 2.2387211385683399, 2.5118864315095824, 2.818382931264455, 3.1622776601683795, 3.5481338923357568, 3.9810717055349731, 4.4668359215096345, 5.0118723362727247, 5.6234132519034912, 6.309573444801936, 7.0794578438413804, 7.9432823472428211, 8.9125093813374594, 10.0, 11.220184543019629, 12.589254117941687, 14.125375446227554, 15.848931924611142, 17.782794100389228, 19.952623149688787, 22.387211385683422, 25.11886431509582, 28.183829312644551, 31.622776601683793, 35.481338923357534, 39.810717055349777, 44.668359215096345, 50.118723362727252, 56.234132519034908, 63.095734448019428, 70.794578438413879, 79.432823472428211, 89.12509381337459, 100.0 };
  const int nBins_vertex_Lxy = 20; const double bins_vertex_Lxy[20+1] = { 0.001, 0.0017782794100389228, 0.0031622776601683794, 0.005623413251903491, 0.01, 0.017782794100389229, 0.031622776601683791, 0.056234132519034911, 0.10000000000000001, 0.17782794100389229, 0.31622776601683794, 0.56234132519034907, 1.0, 1.7782794100389228, 3.1622776601683795, 5.6234132519034912, 10.0, 17.782794100389228, 31.622776601683793, 56.234132519034908, 100.0 };
  const int nBins_vertex_mass = 20; const double bins_vertex_mass[20+1] = { 0.001, 0.0017782794100389228, 0.0031622776601683794, 0.005623413251903491, 0.01, 0.017782794100389229, 0.031622776601683791, 0.056234132519034911, 0.10000000000000001, 0.17782794100389229, 0.31622776601683794, 0.56234132519034907, 1.0, 1.7782794100389228, 3.1622776601683795, 5.6234132519034912, 10.0, 17.782794100389228, 31.622776601683793, 56.234132519034908, 100.0 };
  //[[[end]]]

};

EmJetHistos::EmJetHistos()
{

  /*[[[cog
    mod.generate_histo_map_init()
    ]]]*/
  hist1d["cutflow"] = new TH1F("cutflow", "cutflow" , 25, 0, 25);
  hist1d["nJet"] = new TH1F("nJet", "nJet" , 25, -0.5, 24.5);
  hist1d["nJetPostCut"] = new TH1F("nJetPostCut", "nJetPostCut" , 25, -0.5, 24.5);
  hist1d["ht4"] = new TH1F("ht4", "ht4" , 100, 0, 2500);
  hist1d["ht"] = new TH1F("ht", "ht" , 100, 0, 2500);
  hist1d["sigmaPt"] = new TH1F("sigmaPt", "sigmaPt" , 100, 0, 1500);
  hist1d["sigmaPt2"] = new TH1F("sigmaPt2", "sigmaPt2" , 100, 0, 1500);
  hist1d["deltaPt"] = new TH1F("deltaPt", "deltaPt" , 100, 0, 1000);
  hist1d["vertex_Lxy"] = new TH1F("vertex_Lxy", "vertex_Lxy" , nBins_vertex_Lxy, bins_vertex_Lxy);
  hist1d["vertex_mass"] = new TH1F("vertex_mass", "vertex_mass" , nBins_vertex_mass, bins_vertex_mass);
  hist1d["jet_pt"] = new TH1F("jet_pt", "jet_pt" , 100, 0, 1000);
  hist1d["jet_eta"] = new TH1F("jet_eta", "jet_eta" , 100, -5, 5);
  hist1d["jet_nTracks"] = new TH1F("jet_nTracks", "jet_nTracks" , 100, -0.5, 99.5);
  hist1d["jet_medianLogIpSig"] = new TH1F("jet_medianLogIpSig", "jet_medianLogIpSig" , 100, -5, 5);
  hist1d["jet_medLogIpSig"] = new TH1F("jet_medLogIpSig", "jet_medLogIpSig" , 100, -5, 5);
  hist1d["jet_alphaMax"] = new TH1F("jet_alphaMax", "jet_alphaMax" , 100, 0.0, 1.0);
  hist1d["jet_nDarkPions"] = new TH1F("jet_nDarkPions", "jet_nDarkPions" , 100, -0.5, 99.5);
  hist1d["jet_nVertex"] = new TH1F("jet_nVertex", "jet_nVertex" , 100, -0.5, 99.5);
  hist1d["jet_prompt_frac_E"] = new TH1F("jet_prompt_frac_E", "jet_prompt_frac_E" , 100, 0.0, 2.0);
  hist1d["jet_displaced_frac"] = new TH1F("jet_displaced_frac", "jet_displaced_frac" , 100, 0.0, 2.0);
  hist1d["jet_alphaMaxNeg"] = new TH1F("jet_alphaMaxNeg", "jet_alphaMaxNeg" , 100, 0.0, 1.0);
  hist1d["jet_cef"] = new TH1F("jet_cef", "jet_cef" , 100, 0.0, 1.0);
  hist1d["jet_nef"] = new TH1F("jet_nef", "jet_nef" , 100, 0.0, 1.0);
  hist1d["sumMedianLogIpSig"] = new TH1F("sumMedianLogIpSig", "sumMedianLogIpSig" , 100, -25, 25);
  hist1d["track_pt"] = new TH1F("track_pt", "track_pt" , 100, 0.0, 10.0);
  hist1d["track_eta"] = new TH1F("track_eta", "track_eta" , 100, -5, 5);
  hist1d["track_phi"] = new TH1F("track_phi", "track_phi" , 100, -5, 5);
  hist1d["track_ipXY"] = new TH1F("track_ipXY", "track_ipXY" , nBins_track_ipXY, bins_track_ipXY);
  hist1d["track_ipSig"] = new TH1F("track_ipSig", "track_ipSig" , nBins_track_ipSig, bins_track_ipSig);
  hist1d["track_logIpSig"] = new TH1F("track_logIpSig", "track_logIpSig" , 100, -5, 5);
  hist1d["track_nHits"] = new TH1F("track_nHits", "track_nHits" , 100, -0.5, 99.5);
  hist1d["track_nMissHits"] = new TH1F("track_nMissHits", "track_nMissHits" , 100, -0.5, 99.5);
  hist1d["track_missHitFrac"] = new TH1F("track_missHitFrac", "track_missHitFrac" , 100, 0.0, 5.0);
  hist1d["track_nTrkLayers"] = new TH1F("track_nTrkLayers", "track_nTrkLayers" , 100, -0.5, 99.5);
  hist1d["track_nMissInnerTrkLayers"] = new TH1F("track_nMissInnerTrkLayers", "track_nMissInnerTrkLayers" , 100, -0.5, 99.5);
  hist1d["track_nPxlLayers"] = new TH1F("track_nPxlLayers", "track_nPxlLayers" , 100, -0.5, 99.5);
  hist1d["track_nMissInnerPxlLayers"] = new TH1F("track_nMissInnerPxlLayers", "track_nMissInnerPxlLayers" , 100, -0.5, 99.5);
  hist1d["track_nNetMissInnerLayers"] = new TH1F("track_nNetMissInnerLayers", "track_nNetMissInnerLayers" , 100, -0.5, 99.5);
  hist1d["track_missLayerFrac"] = new TH1F("track_missLayerFrac", "track_missLayerFrac" , 100, 0.0, 5.0);
  hist1d["track_algo"] = new TH1F("track_algo", "track_algo" , 100, 0.0, 100);
  hist1d["track_originalAlgo"] = new TH1F("track_originalAlgo", "track_originalAlgo" , 100, 0.0, 100);
  hist1d["track_dRToJetAxis"] = new TH1F("track_dRToJetAxis", "track_dRToJetAxis" , 100, 0.0, 0.5);
  hist1d["track_distanceToJet"] = new TH1F("track_distanceToJet", "track_distanceToJet" , nBins_track_distanceToJet, bins_track_distanceToJet);
  hist1d["vertex_chi2"] = new TH1F("vertex_chi2", "vertex_chi2" , 100, 0.0, 100);
  hist1d["vertex_ndof"] = new TH1F("vertex_ndof", "vertex_ndof" , 100, 0.0, 20);
  hist1d["vertex_pt2sum"] = new TH1F("vertex_pt2sum", "vertex_pt2sum" , 100, 0.0, 100);
  hist1d["vertex_nTracks"] = new TH1F("vertex_nTracks", "vertex_nTracks" , 100, 0.0, 100);
  hist2d["track_pt_VS_track_eta"] = new TH2F("track_pt_VS_track_eta", "track_pt_VS_track_eta" , 100, -5, 5, 100, 0.0, 10.0);
  hist2d["track_phi_VS_track_eta"] = new TH2F("track_phi_VS_track_eta", "track_phi_VS_track_eta" , 100, -5, 5, 100, -5, 5);
  hist2d["track_ipXY_VS_track_phi"] = new TH2F("track_ipXY_VS_track_phi", "track_ipXY_VS_track_phi" , 100, -5, 5, nBins_track_ipXY, bins_track_ipXY);
  hist2d["track_ipXY_VS_track_nHits"] = new TH2F("track_ipXY_VS_track_nHits", "track_ipXY_VS_track_nHits" , 100, -0.5, 99.5, nBins_track_ipXY, bins_track_ipXY);
  hist2d["track_ipSig_VS_track_nHits"] = new TH2F("track_ipSig_VS_track_nHits", "track_ipSig_VS_track_nHits" , 100, -0.5, 99.5, nBins_track_ipSig, bins_track_ipSig);
  hist2d["jet_medLogIpSig_VS_jet_alphaMax"] = new TH2F("jet_medLogIpSig_VS_jet_alphaMax", "jet_medLogIpSig_VS_jet_alphaMax" , 100, 0.0, 1.0, 100, -5, 5);
  hist2d["jet_prompt_frac_E_VS_jet_alphaMax"] = new TH2F("jet_prompt_frac_E_VS_jet_alphaMax", "jet_prompt_frac_E_VS_jet_alphaMax" , 100, 0.0, 1.0, 100, 0.0, 2.0);
  hist2d["jet_displaced_frac_VS_jet_alphaMaxNeg"] = new TH2F("jet_displaced_frac_VS_jet_alphaMaxNeg", "jet_displaced_frac_VS_jet_alphaMaxNeg" , 100, 0.0, 1.0, 100, 0.0, 2.0);
  hist1d["vertex_Lxy/sig"] = new TH1F("vertex_Lxy/sig", "vertex_Lxy/sig" , nBins_vertex_Lxy, bins_vertex_Lxy);
  hist1d["vertex_mass/sig"] = new TH1F("vertex_mass/sig", "vertex_mass/sig" , nBins_vertex_mass, bins_vertex_mass);
  hist1d["jet_pt/sig"] = new TH1F("jet_pt/sig", "jet_pt/sig" , 100, 0, 1000);
  hist1d["jet_eta/sig"] = new TH1F("jet_eta/sig", "jet_eta/sig" , 100, -5, 5);
  hist1d["jet_nTracks/sig"] = new TH1F("jet_nTracks/sig", "jet_nTracks/sig" , 100, -0.5, 99.5);
  hist1d["jet_medianLogIpSig/sig"] = new TH1F("jet_medianLogIpSig/sig", "jet_medianLogIpSig/sig" , 100, -5, 5);
  hist1d["jet_medLogIpSig/sig"] = new TH1F("jet_medLogIpSig/sig", "jet_medLogIpSig/sig" , 100, -5, 5);
  hist1d["jet_alphaMax/sig"] = new TH1F("jet_alphaMax/sig", "jet_alphaMax/sig" , 100, 0.0, 1.0);
  hist1d["jet_nDarkPions/sig"] = new TH1F("jet_nDarkPions/sig", "jet_nDarkPions/sig" , 100, -0.5, 99.5);
  hist1d["jet_nVertex/sig"] = new TH1F("jet_nVertex/sig", "jet_nVertex/sig" , 100, -0.5, 99.5);
  hist1d["jet_prompt_frac_E/sig"] = new TH1F("jet_prompt_frac_E/sig", "jet_prompt_frac_E/sig" , 100, 0.0, 2.0);
  hist1d["jet_displaced_frac/sig"] = new TH1F("jet_displaced_frac/sig", "jet_displaced_frac/sig" , 100, 0.0, 2.0);
  hist1d["jet_alphaMaxNeg/sig"] = new TH1F("jet_alphaMaxNeg/sig", "jet_alphaMaxNeg/sig" , 100, 0.0, 1.0);
  hist1d["jet_cef/sig"] = new TH1F("jet_cef/sig", "jet_cef/sig" , 100, 0.0, 1.0);
  hist1d["jet_nef/sig"] = new TH1F("jet_nef/sig", "jet_nef/sig" , 100, 0.0, 1.0);
  hist1d["track_pt/sig"] = new TH1F("track_pt/sig", "track_pt/sig" , 100, 0.0, 10.0);
  hist1d["track_eta/sig"] = new TH1F("track_eta/sig", "track_eta/sig" , 100, -5, 5);
  hist1d["track_phi/sig"] = new TH1F("track_phi/sig", "track_phi/sig" , 100, -5, 5);
  hist1d["track_ipXY/sig"] = new TH1F("track_ipXY/sig", "track_ipXY/sig" , nBins_track_ipXY, bins_track_ipXY);
  hist1d["track_ipSig/sig"] = new TH1F("track_ipSig/sig", "track_ipSig/sig" , nBins_track_ipSig, bins_track_ipSig);
  hist1d["track_logIpSig/sig"] = new TH1F("track_logIpSig/sig", "track_logIpSig/sig" , 100, -5, 5);
  hist1d["track_nHits/sig"] = new TH1F("track_nHits/sig", "track_nHits/sig" , 100, -0.5, 99.5);
  hist1d["track_nMissHits/sig"] = new TH1F("track_nMissHits/sig", "track_nMissHits/sig" , 100, -0.5, 99.5);
  hist1d["track_missHitFrac/sig"] = new TH1F("track_missHitFrac/sig", "track_missHitFrac/sig" , 100, 0.0, 5.0);
  hist1d["track_nTrkLayers/sig"] = new TH1F("track_nTrkLayers/sig", "track_nTrkLayers/sig" , 100, -0.5, 99.5);
  hist1d["track_nMissInnerTrkLayers/sig"] = new TH1F("track_nMissInnerTrkLayers/sig", "track_nMissInnerTrkLayers/sig" , 100, -0.5, 99.5);
  hist1d["track_nPxlLayers/sig"] = new TH1F("track_nPxlLayers/sig", "track_nPxlLayers/sig" , 100, -0.5, 99.5);
  hist1d["track_nMissInnerPxlLayers/sig"] = new TH1F("track_nMissInnerPxlLayers/sig", "track_nMissInnerPxlLayers/sig" , 100, -0.5, 99.5);
  hist1d["track_nNetMissInnerLayers/sig"] = new TH1F("track_nNetMissInnerLayers/sig", "track_nNetMissInnerLayers/sig" , 100, -0.5, 99.5);
  hist1d["track_missLayerFrac/sig"] = new TH1F("track_missLayerFrac/sig", "track_missLayerFrac/sig" , 100, 0.0, 5.0);
  hist1d["track_algo/sig"] = new TH1F("track_algo/sig", "track_algo/sig" , 100, 0.0, 100);
  hist1d["track_originalAlgo/sig"] = new TH1F("track_originalAlgo/sig", "track_originalAlgo/sig" , 100, 0.0, 100);
  hist1d["track_dRToJetAxis/sig"] = new TH1F("track_dRToJetAxis/sig", "track_dRToJetAxis/sig" , 100, 0.0, 0.5);
  hist1d["track_distanceToJet/sig"] = new TH1F("track_distanceToJet/sig", "track_distanceToJet/sig" , nBins_track_distanceToJet, bins_track_distanceToJet);
  hist1d["vertex_chi2/sig"] = new TH1F("vertex_chi2/sig", "vertex_chi2/sig" , 100, 0.0, 100);
  hist1d["vertex_ndof/sig"] = new TH1F("vertex_ndof/sig", "vertex_ndof/sig" , 100, 0.0, 20);
  hist1d["vertex_pt2sum/sig"] = new TH1F("vertex_pt2sum/sig", "vertex_pt2sum/sig" , 100, 0.0, 100);
  hist1d["vertex_nTracks/sig"] = new TH1F("vertex_nTracks/sig", "vertex_nTracks/sig" , 100, 0.0, 100);
  hist2d["track_pt_VS_track_eta/sig"] = new TH2F("track_pt_VS_track_eta/sig", "track_pt_VS_track_eta/sig" , 100, -5, 5, 100, 0.0, 10.0);
  hist2d["track_phi_VS_track_eta/sig"] = new TH2F("track_phi_VS_track_eta/sig", "track_phi_VS_track_eta/sig" , 100, -5, 5, 100, -5, 5);
  hist2d["track_ipXY_VS_track_phi/sig"] = new TH2F("track_ipXY_VS_track_phi/sig", "track_ipXY_VS_track_phi/sig" , 100, -5, 5, nBins_track_ipXY, bins_track_ipXY);
  hist2d["track_ipXY_VS_track_nHits/sig"] = new TH2F("track_ipXY_VS_track_nHits/sig", "track_ipXY_VS_track_nHits/sig" , 100, -0.5, 99.5, nBins_track_ipXY, bins_track_ipXY);
  hist2d["track_ipSig_VS_track_nHits/sig"] = new TH2F("track_ipSig_VS_track_nHits/sig", "track_ipSig_VS_track_nHits/sig" , 100, -0.5, 99.5, nBins_track_ipSig, bins_track_ipSig);
  hist2d["jet_medLogIpSig_VS_jet_alphaMax/sig"] = new TH2F("jet_medLogIpSig_VS_jet_alphaMax/sig", "jet_medLogIpSig_VS_jet_alphaMax/sig" , 100, 0.0, 1.0, 100, -5, 5);
  hist2d["jet_prompt_frac_E_VS_jet_alphaMax/sig"] = new TH2F("jet_prompt_frac_E_VS_jet_alphaMax/sig", "jet_prompt_frac_E_VS_jet_alphaMax/sig" , 100, 0.0, 1.0, 100, 0.0, 2.0);
  hist2d["jet_displaced_frac_VS_jet_alphaMaxNeg/sig"] = new TH2F("jet_displaced_frac_VS_jet_alphaMaxNeg/sig", "jet_displaced_frac_VS_jet_alphaMaxNeg/sig" , 100, 0.0, 1.0, 100, 0.0, 2.0);
    //[[[end]]]

}

EmJetHistos::~EmJetHistos()
{
  for (const auto & kv : hist1d) {
    delete kv.second;
  }
  for (const auto & kv : hist2d) {
    delete kv.second;
  }
}
